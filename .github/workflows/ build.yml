# 整个流程的名字
name: 自动发布npm包

# 触发时机，在 main 分支 push 操作触发
on:
  push:
    branches:
      - main

# 默认shell
defaults:
  run:
    shell: bash
# 任务，定义个changelog 的任务
jobs:
  changelog:
    name: Changelog PR or Release
    permissions: write-all
    # 这里判断仓库owner是否是我自己，为了避免别人 fork 仓库触发，请自行修改
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Clean working directory
        run: |
          git checkout .
          git clean -fd

      # 设置 Node
      - name: 安装Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 配置Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - name: Install pnpm
        run: npm install -g pnpm

      # 安装依赖
      - name: 安装依赖
        run: pnpm install --no-frozen-lockfile

      # 打包
      - name: 构建npm包
        run: pnpm run build

      # 提交构建产物
      - name: Commit build artifacts
        run: |
          git add .
          git commit -m "chore: update build artifacts" || echo "No changes to commit"

      - name: 版本更新
        run: |
          git status
          pnpm version patch --no-git-tag-version
          git add .
          git commit -m "chore: bump version"
        env:
          # GITHUB_TOKEN 是 CI 里自带的默认 token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NPM_TOKEN 需要稍后在 npm 网站生成。
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 使用GitHub的token
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 推送npm版本
        run: npm publish

      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${{ github.ref }}

      # 构建HTML
      - name: Build HTML
        run: npm run build:html

      # 部署到远程服务器
      - name: Deploy to server
        env:
          LASTSSH: "Doing something after copying"
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        with:
          host: 146.56.250.72
          user: ${{ secrets.SSH_USERNAME }}
          pass: ${{ secrets.SSH_PASSWORD }}
          scp: |
            ./html/* => /usr/share/nginx/html
            last_ssh: |
            echo $LASTSSH 
            nginx -t
            nginx -s reload
          port: 22

